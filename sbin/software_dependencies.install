#!/bin/bash -x
#
# Script to install software that are dependancies
#


# Source environment
. ../etc/env.sh

#
# Install any other packages on the OS if needed
#
# yum -y install <package_name>-<package-version>
#
yum -y install gcc gcc-c++ autoconf automake libtool make nasm pkgconfig zlib-devel ImageMagick ghostscript ant git unzip freetype-devel file
#
# create fedora user account
#
groupadd -r $FEDORA_USER
useradd -c 'fedora user account' -g $FEDORA_USER -d $REPOSITORY_HOME -M -r -s /bin/bash $FEDORA_USER
usermod -G fedora apache
echo "Be sure to set the password for the fedora user (passwd ${FEDORA_USER})." > /etc/motd
echo "" >> /etc/motd
#
# set permission on INSTALL_DIR
#
#chmod 775 $INSTALL_PREFIX # change below to this but need to have INSTALL_PREFIX in env.sh first
chmod 775 /opt
if [ ! -d $SRC_DIR ]
then
	mkdir -p $SRC_DIR
fi
#
# Install Java
#
if [ ! -d $INSTALL_PREFIX/jdk1.8.0_40 ]
then 
	cd $INSTALL_PREFIX
	wget --no-cookies --no-check-certificate --header "Cookie: gpw_e24=http%3A%2F%2Fwww.oracle.com%2F; oraclelicense=accept-securebackup-cookie" "http://download.oracle.com/otn-pub/java/jdk/8u40-b26/server-jre-8u40-linux-x64.tar.gz"
	tar -zxvf server-jre-8u40-linux-x64.tar.gz
	cd $INSTALL_PREFIX
	ln -s jdk1.8.0_40 java
	alternatives --install /usr/bin/java java /opt/jdk1.8.0_40/bin/java 3
	echo "" >> /etc/motd
	echo "run the command "alternatives --config java" and set it for java 8" >> /etc/motd
else
	echo "Java 8 is already installed!"
fi
#
# Enable EPEL
#
rpm -ivh http://download.fedoraproject.org/pub/epel/6/i386/epel-release-6-8.noarch.rpm
#
# Enable RPM Fusion Repo
#
rpm -ivh http://download1.rpmfusion.org/free/el/updates/6/i386/rpmfusion-free-release-6-1.noarch.rpm
#
# install software
#
#yum -y install ffmpeg
yum -y install xpdf yasm lame lame-libs gdisk gettext libtool
#
# ffmpeg2theora
#
if [ ! -f /usr/bin/ffmpeg2theora ]
then
	wget -N -P ../src http://v2v.cc/~j/ffmpeg2theora/ffmpeg2theora-0.29.linux64.bin
	install -m 755 ../src/ffmpeg2theora-0.29.linux64.bin /usr/bin/ffmpeg2theora
else
	echo "ffmpeg2theora is already installed!"
fi
#
# Install ffmpeg from source (https://trac.ffmpeg.org/wiki/CompilationGuide/Centos)
#
cd $SRC_DIR
mkdir ffmpeg_sources
cd ffmpeg_sources
#
# Install libx264
#
if [ ! -d $SRC_DIR/ffmpeg_sources/x264 ]
then
	cd $SRC_DIR/ffmpeg_sources
	git clone git://git.videolan.org/x264.git
	cd x264
	./configure --prefix=$REPOSITORY_PKGS/ffmpeg --bindir="$REPOSITORY_PKGS/ffmpeg/bin" --enable-static
	make
	make install
	make distclean
else
	echo "x264 source tree already exists in $SRC_DIR/ffmpeg_sources/x264! "
fi
#
# install libfdk_aac
#
if [ ! -d $SRC_DIR/ffmpeg_sources/fdk-aac ]
then
	cd $SRC_DIR/ffmpeg_sources
	git clone http://git.code.sf.net/p/opencore-amr/fdk-aac
	cd fdk-aac
	autoreconf -fiv
	./configure --prefix=$REPOSITORY_PKGS/ffmpeg --disable-shared
	make
	make install
	make distclean
else
	echo "fdk-aac source tree alreasy exists in $SRC_DIR/ffmpeg_sources/fdk-aac!"
fi
#
# install libopus
#
if [ ! -d $SRC_DIR/ffmpeg_sources/opus ]
then
	cd $SRC_DIR/ffmpeg_sources
	git clone git://git.opus-codec.org/opus.git
	cd opus
	autoreconf -fiv
	./configure --prefix=$REPOSITORY_PKGS/ffmpeg --disable-shared
	make
	make install
	make distclean
else
	echo "opus source tree alreasy exists in $SRC_DIR/ffmpeg_sources/opus!"
fi
#
# install libogg
#
if [ ! -d $SRC_DIR/ffmpeg_sources/libogg-1.3.2 ]
then
	cd $SRC_DIR/ffmpeg_sources
	curl -O http://downloads.xiph.org/releases/ogg/libogg-1.3.2.tar.gz
	tar xzvf libogg-1.3.2.tar.gz
	cd libogg-1.3.2
	./configure --prefix=$REPOSITORY_PKGS/ffmpeg --disable-shared
	make
	make install
	make distclean
else
	echo "fdk-aac source tree alreasy exists in $SRC_DIR/ffmpeg_sources/fdk-aac!"
fi
#
# libvorbis
#
if [ ! -d $SRC_DIR/ffmpeg_sources/libvorbis-1.3.4 ]
then
	cd $SRC_DIR/ffmpeg_sources
	curl -O http://downloads.xiph.org/releases/vorbis/libvorbis-1.3.4.tar.gz
	tar xzvf libvorbis-1.3.4.tar.gz
	cd libvorbis-1.3.4
	./configure --prefix=$REPOSITORY_PKGS/ffmpeg --with-ogg="$REPOSITORY_PKGS/ffmpeg" --disable-shared
	make
	make install
	make distclean
else
	echo "libvorbis source tree alreasy exists in $SRC_DIR/ffmpeg_sources/libvorbis-1.3.4!"
fi
#
# install libvpx
#
if [ ! -d $SRC_DIR/ffmpeg_sources/libvpx ]
then
	cd $SRC_DIR/ffmpeg_sources
	git clone --depth 1 https://chromium.googlesource.com/webm/libvpx.git
	cd libvpx
	./configure --prefix="$REPOSITORY_PKGS/ffmpeg" --disable-examples
	make
	make install
	make clean
else
	echo "libvpx source tree alreasy exists in $SRC_DIR/ffmpeg_sources/libvpx!"
fi
#
# build ffmpeg
#
if [ ! -d $SRC_DIR/ffmpeg_sources/ffmpeg ]
then
	cd $SRC_DIR/ffmpeg_sources
	git clone --depth 1 git://source.ffmpeg.org/ffmpeg
	cd ffmpeg
	PKG_CONFIG_PATH="$REPOSITORY_PKGS/ffmpeg/lib/pkgconfig" ./configure --prefix="$REPOSITORY_PKGS/ffmpeg" --extra-cflags="-I$REPOSITORY_PKGS/ffmpeg/include" --extra-ldflags="-L$REPOSITORY_PKGS/ffmpeg/lib:/usr/lib64" --bindir="$REPOSITORY_PKGS/ffmpeg/bin" --enable-gpl --enable-nonfree --enable-libfdk_aac --enable-libmp3lame --enable-libopus --enable-libvorbis --enable-libvpx --enable-libx264 --enable-libfreetype --enable-libtheora
	make
	make install
	make distclean
	hash -r
	#
	# install Makefile that populates symlinks from $REPOSITORY_PKGS/ffmpeg to $REPOSITORY_HOME
	#
	cd $REPOSITORY_PKGS/ffmpeg
	../../sbin/create_package_makefile.sh
	make install
else
	echo "ffmpeg source tree alreasy exists in $SRC_DIR/ffmpeg_sources/ffmpeg!"
fi
if [ -d $REPOSITORY_PKGS/ffmpeg ]
then
	#
	# install Makefile that populates symlinks from $REPOSITORY_PKGS/ffmpeg to $REPOSITORY_HOME
	#
	cd $REPOSITORY_PKGS/ffmpeg
	../../sbin/create_package_makefile.sh
	make install
else
	echo "ffmpeg wasn't built into $REPOSITORY_PKGS/ffmpeg... can't install into $REPOSITORY_PKGS!"
fi
cd $SRC_DIR
#
# Needed for tesseract to find leptonica
#
export LIBLEPT_HEADERSDIR=$REPOSITORY_PKGS/leptonica-1.69/include

#
# Install dependency packages in repository directory tree
#
	for PKG in `ls ../etc/packages | grep .package`
	do
		#. $PKG
		. ../etc/packages/$PKG
		if [ ! -d $REPOSITORY_PKGS/$PACKAGE_NAME-$PACKAGE_VERSION ]
                then
			wget -N -P $SRC_DIR $PACKAGE_URL
			cd $SRC_DIR
			$PACKAGE_UNCOMPRESS $PACKAGE_TARFILE
			cd $PACKAGE_DIR_UNCOMPRESSED
			./configure --prefix=$REPOSITORY_PKGS/$PACKAGE_NAME-$PACKAGE_VERSION $EXTRA_CONFIGURE_ARGS
			make
			make install
			cd $REPOSITORY_PKGS/$PACKAGE_NAME-$PACKAGE_VERSION
			../../sbin/create_package_makefile.sh
			make install
			cd $SRC_DIR
		else
			echo "$PKG is already installed!"
		fi
	done

if [! -L $REPOSITORY_HOME/bin/fits.sh ]
then
	# link fits.sh 
	ln -s $REPOSITORY_HOME/packages/fits-0.6.2/fits.sh $REPOSITORY_HOME/bin/fits.sh
else
	echo "$REPOSITORY_HOME/bin/fits.sh symbolic link already exists!"
fi

if [ ! -f $REPOSITORY_HOME/share/tessdata/eng.cube.size ]
then
	#
	## Add in tesseract language pack
	#
	wget -N -P $SRC_DIR https://tesseract-ocr.googlecode.com/files/tesseract-ocr-3.02.eng.tar.gz
	cd $SRC_DIR
	tar -zxvf tesseract-ocr-3.02.eng.tar.gz
	cp -r tesseract-ocr/tessdata/eng.* $REPOSITORY_HOME/share/tessdata
	chown -R fedora:fedora $REPOSITORY_HOME/share/tessdata/eng.*
else
	echo "Tesseract language files already installed!"
fi
